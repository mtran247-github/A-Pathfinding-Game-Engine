/** * This class,PriorityNode, represents each priority node in the linkedPriorityQueue class * *The only class that needs to access this class would be it's data structure class, known as, LinkedPriorityQueue * *Each node has different methods/ things you can do with the nodes; there are 2 PriorityNode constructor methods, getPriority, getElement, getNext and setNext * *A node in the queue are accessed using these methods * * @author Melissa Tran */public class PriorityNode<T> {	/**	 * next - A pointer to the next node	 */	private PriorityNode<T> next;	/**	 * element - represents the node itself	 */	private T element;	/**	 * priority - A double number, which is used to indicate where to insert into the queue, based on this number (smallest - greatest) 	 * smallest priority number will represent the shortest distance and will be before the numbers with a larger priority, meaning they take longer to get to the exit	 */	private double priority;	/**	 * constructor method - creates a priority node for the LinkedPriorityQueue	 * 	 * 	 * @param element has instance variable equated to it. 	 */	public PriorityNode(T element) {		this.element = element;		this.next = null;		//we need element and next, because when enqueueing a regular node, you would need the element, and the pointer to the next element would be null, cause it is in the end 	}		/**	 * This method is the overloaded constructor method - creates a priority node for the LinkedPriorityQueue	 * 	 * 	 * @param element represents the instance variable element - will give us element of that node	 * @param p represents the instance variable p - will give us priority number of that node	 */	public PriorityNode(T element, double p){		this.element = element;		this.priority=p;		//you need element and priority because when enqueueing a priority node, you would need the element, and the priority to place it in a certain spot in the queue	}		/**	 * This method gets the priority number of that node in the queue	 * 	 * 	 * @return the instance variable; priority - returns the priority number	 */	public double getPriority(){		return this.priority;	}		/**	 * This method will get the element of the node in the queue	 * 	 * 	 * @return the instance variable; element - returns the element of that node 	 */	public T getElement() {		return this.element;	}	/**	 *  This method will get the next node in the queue	 *  	 *  	 * @return the next node in the queue, represented by instance variable next - returns the next node	 */	public PriorityNode<T> getNext() {		return this.next;	}	/**	 * This method set the next node to be a specified node.	 * 	 * 	 * @param next The next node, which equals the instance variable next - changes the next node 	 */	public void setNext(PriorityNode<T> next) {		this.next = next;	}}